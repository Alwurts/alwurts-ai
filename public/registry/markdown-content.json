{
  "name": "markdown-content",
  "type": "registry:ui",
  "description": "A markdown content component.",
  "dependencies": [
    "react-markdown",
    "marked",
    "remark-gfm"
  ],
  "files": [
    {
      "path": "ui/markdown-content.tsx",
      "content": "import { marked } from \"marked\";\nimport { memo, useMemo } from \"react\";\nimport ReactMarkdown, { type Components } from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nconst components: Partial<Components> = {\n\th1: ({ node, children, ...props }) => (\n\t\t<h1 className=\"mt-2 scroll-m-20 text-4xl font-bold\" {...props}>\n\t\t\t{children}\n\t\t</h1>\n\t),\n\th2: ({ node, children, ...props }) => (\n\t\t<h2\n\t\t\tclassName=\"mt-8 scroll-m-20 border-b pb-2 text-2xl font-semibold tracking-tight first:mt-0\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</h2>\n\t),\n\th3: ({ node, children, ...props }) => (\n\t\t<h3\n\t\t\tclassName=\"mt-4 scroll-m-20 text-xl font-semibold tracking-tight\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</h3>\n\t),\n\th4: ({ node, children, ...props }) => (\n\t\t<h4\n\t\t\tclassName=\"mt-4 scroll-m-20 text-lg font-semibold tracking-tight\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</h4>\n\t),\n\th5: ({ node, children, ...props }) => (\n\t\t<h5\n\t\t\tclassName=\"mt-4 scroll-m-20 text-lg font-semibold tracking-tight\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</h5>\n\t),\n\th6: ({ node, children, ...props }) => (\n\t\t<h6\n\t\t\tclassName=\"mt-4 scroll-m-20 text-base font-semibold tracking-tight\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</h6>\n\t),\n\tp: ({ node, children, ...props }) => (\n\t\t<p className=\"leading-6 [&:not(:first-child)]:mt-4\" {...props}>\n\t\t\t{children}\n\t\t</p>\n\t),\n\tstrong: ({ node, children, ...props }) => (\n\t\t<span className=\"font-semibold\" {...props}>\n\t\t\t{children}\n\t\t</span>\n\t),\n\ta: ({ node, children, ...props }) => (\n\t\t<a\n\t\t\tclassName=\"font-medium underline underline-offset-4\"\n\t\t\ttarget=\"_blank\"\n\t\t\trel=\"noreferrer\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</a>\n\t),\n\tol: ({ node, children, ...props }) => (\n\t\t<ol className=\"my-4 ml-6 list-decimal\" {...props}>\n\t\t\t{children}\n\t\t</ol>\n\t),\n\tul: ({ node, children, ...props }) => (\n\t\t<ul className=\"my-4 ml-6 list-disc\" {...props}>\n\t\t\t{children}\n\t\t</ul>\n\t),\n\tli: ({ node, children, ...props }) => (\n\t\t<li className=\"mt-2\" {...props}>\n\t\t\t{children}\n\t\t</li>\n\t),\n\tblockquote: ({ node, children, ...props }) => (\n\t\t<blockquote className=\"mt-4 border-l-2 pl-6 italic\" {...props}>\n\t\t\t{children}\n\t\t</blockquote>\n\t),\n\thr: ({ ...props }) => <hr className=\"my-4 md:my-8\" {...props} />,\n\ttable: ({ className, ...props }) => (\n\t\t<div className=\"my-6 w-full overflow-y-auto\">\n\t\t\t<table\n\t\t\t\tclassName=\"relative w-full overflow-hidden border-none text-sm\"\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t</div>\n\t),\n\ttr: ({ className, ...props }) => (\n\t\t<tr className=\"last:border-b-none m-0 border-b\" {...props} />\n\t),\n\tth: ({ className, ...props }) => (\n\t\t<th\n\t\t\tclassName=\"px-4 py-2 text-left font-bold [&[align=center]]:text-center [&[align=right]]:text-right\"\n\t\t\t{...props}\n\t\t/>\n\t),\n\ttd: ({ className, ...props }) => (\n\t\t<td\n\t\t\tclassName=\"px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\"\n\t\t\t{...props}\n\t\t/>\n\t),\n\timg: ({ className, alt, ...props }) => (\n\t\t// biome-ignore lint/a11y/useAltText: alt is not required\n\t\t<img className=\"rounded-md\" alt={alt} {...props} />\n\t),\n\tpre: ({ children, ...props }) => (\n\t\t<pre\n\t\t\t//className=\"mb-4 mt-6 max-h-[650px] overflow-x-auto rounded-xl bg-zinc-950 py-4 dark:bg-zinc-900\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</pre>\n\t),\n\tcode: ({ className, ...props }) => (\n\t\t<code\n\t\t\tclassName=\"relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm\"\n\t\t\t{...props}\n\t\t/>\n\t),\n};\n\nfunction parseMarkdownIntoBlocks(markdown: string): string[] {\n\tconst tokens = marked.lexer(markdown);\n\treturn tokens.map((token) => token.raw);\n}\n\ninterface MarkdownBlockProps {\n\tcontent: string;\n\tclassName?: string;\n}\n\nconst MemoizedMarkdownBlock = memo(\n\t({ content, className }: MarkdownBlockProps) => {\n\t\treturn (\n\t\t\t<ReactMarkdown\n\t\t\t\tremarkPlugins={[remarkGfm]}\n\t\t\t\tcomponents={components}\n\t\t\t\tclassName={className}\n\t\t\t>\n\t\t\t\t{content}\n\t\t\t</ReactMarkdown>\n\t\t);\n\t},\n\t(prevProps, nextProps) => {\n\t\tif (prevProps.content !== nextProps.content) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n);\n\nMemoizedMarkdownBlock.displayName = \"MemoizedMarkdownBlock\";\n\ninterface MarkdownContentProps {\n\tcontent: string;\n\tid: string;\n\tclassName?: string;\n}\n\nexport const MarkdownContent = memo(\n\t({ content, id, className }: MarkdownContentProps) => {\n\t\tconst blocks = useMemo(() => parseMarkdownIntoBlocks(content), [content]);\n\n\t\treturn blocks.map((block, index) => (\n\t\t\t<MemoizedMarkdownBlock\n\t\t\t\tcontent={block}\n\t\t\t\tclassName={className}\n\t\t\t\tkey={`${id}-block_${\n\t\t\t\t\t// biome-ignore lint/suspicious/noArrayIndexKey: <explanation>\n\t\t\t\t\tindex\n\t\t\t\t}`}\n\t\t\t/>\n\t\t));\n\t},\n);\n\nMarkdownContent.displayName = \"MarkdownContent\";\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}