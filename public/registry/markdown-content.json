{
  "name": "markdown-content",
  "type": "registry:ui",
  "description": "A markdown content component.",
  "dependencies": [
    "react-markdown",
    "marked"
  ],
  "files": [
    {
      "path": "ui/markdown-content.tsx",
      "content": "import { marked } from \"marked\";\nimport { memo, useMemo } from \"react\";\nimport ReactMarkdown, { type Components } from \"react-markdown\";\n\nconst components: Partial<Components> = {\n\tpre: ({ children }) => <>{children}</>,\n\tol: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<ol className=\"list-decimal list-outside ml-4\" {...props}>\n\t\t\t\t{children}\n\t\t\t</ol>\n\t\t);\n\t},\n\tli: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<li className=\"py-1\" {...props}>\n\t\t\t\t{children}\n\t\t\t</li>\n\t\t);\n\t},\n\tul: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<ul className=\"list-decimal list-outside ml-4\" {...props}>\n\t\t\t\t{children}\n\t\t\t</ul>\n\t\t);\n\t},\n\tstrong: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<span className=\"font-semibold\" {...props}>\n\t\t\t\t{children}\n\t\t\t</span>\n\t\t);\n\t},\n\ta: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<a\n\t\t\t\tclassName=\"text-blue-500 hover:underline\"\n\t\t\t\ttarget=\"_blank\"\n\t\t\t\trel=\"noreferrer\"\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</a>\n\t\t);\n\t},\n\tp: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<p className=\"my-1\" {...props}>\n\t\t\t\t{children}\n\t\t\t</p>\n\t\t);\n\t},\n\th1: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<h1 className=\"text-3xl font-semibold mt-4 mb-2\" {...props}>\n\t\t\t\t{children}\n\t\t\t</h1>\n\t\t);\n\t},\n\th2: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<h2 className=\"text-2xl font-semibold mt-6 mb-2\" {...props}>\n\t\t\t\t{children}\n\t\t\t</h2>\n\t\t);\n\t},\n\th3: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<h3 className=\"text-xl font-semibold mt-6 mb-2\" {...props}>\n\t\t\t\t{children}\n\t\t\t</h3>\n\t\t);\n\t},\n\th4: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<h4 className=\"text-lg font-semibold mt-6 mb-2\" {...props}>\n\t\t\t\t{children}\n\t\t\t</h4>\n\t\t);\n\t},\n\th5: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<h5 className=\"text-base font-semibold mt-6 mb-2\" {...props}>\n\t\t\t\t{children}\n\t\t\t</h5>\n\t\t);\n\t},\n\th6: ({ node, children, ...props }) => {\n\t\treturn (\n\t\t\t<h6 className=\"text-sm font-semibold mt-6 mb-2\" {...props}>\n\t\t\t\t{children}\n\t\t\t</h6>\n\t\t);\n\t},\n};\n\nfunction parseMarkdownIntoBlocks(markdown: string): string[] {\n\tconst tokens = marked.lexer(markdown);\n\treturn tokens.map((token) => token.raw);\n}\n\ninterface MarkdownBlockProps {\n\tcontent: string;\n\tclassName?: string;\n}\n\nconst MemoizedMarkdownBlock = memo(\n\t({ content, className }: MarkdownBlockProps) => {\n\t\treturn (\n\t\t\t<ReactMarkdown components={components} className={className}>\n\t\t\t\t{content}\n\t\t\t</ReactMarkdown>\n\t\t);\n\t},\n\t(prevProps, nextProps) => {\n\t\tif (prevProps.content !== nextProps.content) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n);\n\nMemoizedMarkdownBlock.displayName = \"MemoizedMarkdownBlock\";\n\ninterface MarkdownContentProps {\n\tcontent: string;\n\tid: string;\n\tclassName?: string;\n}\n\nexport const MarkdownContent = memo(\n\t({ content, id, className }: MarkdownContentProps) => {\n\t\tconst blocks = useMemo(() => parseMarkdownIntoBlocks(content), [content]);\n\n\t\treturn blocks.map((block, index) => (\n\t\t\t<MemoizedMarkdownBlock\n\t\t\t\tcontent={block}\n\t\t\t\tclassName={className}\n\t\t\t\tkey={`${id}-block_${\n\t\t\t\t\t// biome-ignore lint/suspicious/noArrayIndexKey: <explanation>\n\t\t\t\t\tindex\n\t\t\t\t}`}\n\t\t\t/>\n\t\t));\n\t},\n);\n\nMarkdownContent.displayName = \"MarkdownContent\";\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}