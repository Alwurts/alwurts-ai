{
  "name": "chat-input",
  "type": "registry:ui",
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "path": "ui/chat-input.tsx",
      "content": "\"use client\";\n\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport type React from \"react\";\nimport { useTextareaResize } from \"@/registry/hooks/use-textarea-resize\";\n\nexport interface ChatInputProps extends React.ComponentProps<typeof Textarea> {\n\tsubmitMessage?: () => void;\n}\n\nfunction ChatInput({\n\tsubmitMessage,\n\tvalue,\n\tclassName,\n\t...props\n}: ChatInputProps) {\n\tconst textareaRef = useTextareaResize(value);\n\tconst handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n\t\tif (!submitMessage) {\n\t\t\treturn;\n\t\t}\n\t\tif (e.key === \"Enter\" && !e.shiftKey) {\n\t\t\tif (typeof value === \"string\" && value.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\te.preventDefault();\n\t\t\tsubmitMessage();\n\t\t}\n\t};\n\n\treturn (\n\t\t<Textarea\n\t\t\tref={textareaRef}\n\t\t\t{...props}\n\t\t\tvalue={value}\n\t\t\tonKeyDown={handleKeyDown}\n\t\t\tclassName={cn(\n\t\t\t\t\"min-h-[24px] max-h-[calc(75dvh)] resize-none overflow-hidden bg-muted\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\trows={2}\n\t\t/>\n\t);\n}\n\nChatInput.displayName = \"ChatInput\";\n\nexport { ChatInput };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "hooks/use-textarea-resize.ts",
      "content": "import { useLayoutEffect, useRef } from \"react\";\nimport type { ComponentProps } from \"react\";\n\nexport function useTextareaResize(value: ComponentProps<\"textarea\">[\"value\"]) {\n\tconst textareaRef = useRef<HTMLTextAreaElement>(null);\n\n\t// biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n\tuseLayoutEffect(() => {\n\t\tconst textArea = textareaRef.current;\n\n\t\tif (textArea) {\n\t\t\t// Reset height to auto first to get the correct scrollHeight\n\t\t\ttextArea.style.height = \"auto\";\n\t\t\tconst scrollHeight = textArea.scrollHeight;\n\t\t\ttextArea.style.height = `${scrollHeight}px`;\n\t\t}\n\t}, [textareaRef, value]);\n\n\treturn textareaRef;\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}