{
  "name": "chat-input",
  "type": "registry:ui",
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "path": "ui/chat-input.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\nimport { useTextareaResize } from \"@/hooks/use-textarea-resize\";\nimport { ArrowUpIcon } from \"lucide-react\";\nimport type React from \"react\";\nimport { createContext, useContext } from \"react\";\n\ninterface ChatInputContextValue {\n\tvalue?: string;\n\tonChange?: React.ChangeEventHandler<HTMLTextAreaElement>;\n\tonSubmit?: () => void;\n\tloading?: boolean;\n\tonStop?: () => void;\n\tvariant?: \"default\" | \"unstyled\";\n}\n\nconst ChatInputContext = createContext<ChatInputContextValue>({});\n\ninterface ChatInputProps extends Omit<ChatInputContextValue, \"variant\"> {\n\tchildren: React.ReactNode;\n\tclassName?: string;\n\tvariant?: \"default\" | \"unstyled\";\n}\n\nfunction ChatInput({\n\tchildren,\n\tclassName,\n\tvariant = \"default\",\n\tvalue,\n\tonChange,\n\tonSubmit,\n\tloading,\n\tonStop,\n}: ChatInputProps) {\n\tconst contextValue: ChatInputContextValue = {\n\t\tvalue,\n\t\tonChange,\n\t\tonSubmit,\n\t\tloading,\n\t\tonStop,\n\t\tvariant,\n\t};\n\n\treturn (\n\t\t<ChatInputContext.Provider value={contextValue}>\n\t\t\t<div\n\t\t\t\tclassName={cn(\n\t\t\t\t\tvariant === \"default\" &&\n\t\t\t\t\t\t\"flex flex-col items-end w-full p-2 rounded-md border border-input bg-transparent focus-within:ring-1 focus-within:ring-ring focus-within:outline-none\",\n\t\t\t\t\tvariant === \"unstyled\" && \"flex items-start gap-2 w-full\",\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</ChatInputContext.Provider>\n\t);\n}\n\nChatInput.displayName = \"ChatInput\";\n\ninterface ChatInputTextAreaProps extends React.ComponentProps<typeof Textarea> {\n\tvalue?: string;\n\tonChange?: React.ChangeEventHandler<HTMLTextAreaElement>;\n\tonSubmit?: () => void;\n\tvariant?: \"default\" | \"unstyled\";\n}\n\nfunction ChatInputTextArea({\n\tonSubmit: onSubmitProp,\n\tvalue: valueProp,\n\tonChange: onChangeProp,\n\tclassName,\n\tvariant: variantProp,\n\t...props\n}: ChatInputTextAreaProps) {\n\tconst context = useContext(ChatInputContext);\n\tconst value = valueProp ?? context.value ?? \"\";\n\tconst onChange = onChangeProp ?? context.onChange;\n\tconst onSubmit = onSubmitProp ?? context.onSubmit;\n\n\t// Convert parent variant to textarea variant unless explicitly overridden\n\tconst variant =\n\t\tvariantProp ?? (context.variant === \"default\" ? \"unstyled\" : \"default\");\n\n\tconst textareaRef = useTextareaResize(value);\n\tconst handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n\t\tif (!onSubmit) {\n\t\t\treturn;\n\t\t}\n\t\tif (e.key === \"Enter\" && !e.shiftKey) {\n\t\t\tif (typeof value === \"string\" && value.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\te.preventDefault();\n\t\t\tonSubmit();\n\t\t}\n\t};\n\n\treturn (\n\t\t<Textarea\n\t\t\tref={textareaRef}\n\t\t\t{...props}\n\t\t\tvalue={value}\n\t\t\tonChange={onChange}\n\t\t\tonKeyDown={handleKeyDown}\n\t\t\tclassName={cn(\n\t\t\t\t\"max-h-[400px] resize-none overflow-x-hidden\",\n\t\t\t\tvariant === \"unstyled\" &&\n\t\t\t\t\t\"border-none focus-visible:ring-0 focus-visible:ring-offset-0 shadow-none\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\trows={2}\n\t\t/>\n\t);\n}\n\nChatInputTextArea.displayName = \"ChatInputTextArea\";\n\ninterface ChatInputSubmitProps extends React.ComponentProps<typeof Button> {\n\tonSubmit?: () => void;\n\tloading?: boolean;\n\tonStop?: () => void;\n}\n\nfunction ChatInputSubmit({\n\tonSubmit: onSubmitProp,\n\tloading: loadingProp,\n\tonStop: onStopProp,\n\tclassName,\n\t...props\n}: ChatInputSubmitProps) {\n\tconst context = useContext(ChatInputContext);\n\tconst loading = loadingProp ?? context.loading;\n\tconst onStop = onStopProp ?? context.onStop;\n\tconst onSubmit = onSubmitProp ?? context.onSubmit;\n\n\tif (loading && onStop) {\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tonClick={onStop}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"shrink-0 rounded-full p-1.5 h-fit border dark:border-zinc-600\",\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth=\"24\"\n\t\t\t\t\theight=\"24\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\taria-label=\"Stop\"\n\t\t\t\t>\n\t\t\t\t\t<title>Stop</title>\n\t\t\t\t\t<rect x=\"6\" y=\"6\" width=\"12\" height=\"12\" />\n\t\t\t\t</svg>\n\t\t\t</Button>\n\t\t);\n\t}\n\n\treturn (\n\t\t<Button\n\t\t\tclassName={cn(\n\t\t\t\t\"shrink-0 rounded-full p-1.5 h-fit border dark:border-zinc-600\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tonClick={(event) => {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tonSubmit?.();\n\t\t\t}}\n\t\t\t{...props}\n\t\t>\n\t\t\t<ArrowUpIcon />\n\t\t</Button>\n\t);\n}\n\nChatInputSubmit.displayName = \"ChatInputSubmit\";\n\nexport { ChatInput, ChatInputTextArea, ChatInputSubmit };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "hooks/use-textarea-resize.ts",
      "content": "import { useLayoutEffect, useRef } from \"react\";\nimport type { ComponentProps } from \"react\";\n\nexport function useTextareaResize(value: ComponentProps<\"textarea\">[\"value\"]) {\n\tconst textareaRef = useRef<HTMLTextAreaElement>(null);\n\n\t// biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n\tuseLayoutEffect(() => {\n\t\tconst textArea = textareaRef.current;\n\n\t\tif (textArea) {\n\t\t\t// Reset height to auto first to get the correct scrollHeight\n\t\t\ttextArea.style.height = \"auto\";\n\t\t\tconst scrollHeight = textArea.scrollHeight;\n\t\t\ttextArea.style.height = `${scrollHeight + 2}px`;\n\t\t}\n\t}, [textareaRef, value]);\n\n\treturn textareaRef;\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}