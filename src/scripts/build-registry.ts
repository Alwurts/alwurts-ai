import { promises as fs, existsSync } from "node:fs";
import { tmpdir } from "node:os";
import path from "node:path";
import { rimraf } from "rimraf";
import { Project, ScriptKind } from "ts-morph";
import type { z } from "zod";
import { registry } from "../registry";
import {
	type Registry,
	registryItemSchema,
	type registryItemTypeSchema,
	registrySchema,
} from "../registry/schema";

const REGISTRY_INDEX_WHITELIST: z.infer<typeof registryItemTypeSchema>[] = [
	"registry:ui",
	//"registry:lib",
	"registry:hook",
	//"registry:theme",
	//"registry:block",
	"registry:example",
	//"registry:internal",
];

const REGISTRY_BASE_PATH = "src/registry";
const REGISTRY_PUBLIC_PATH = path.join(process.cwd(), "public/registry");
const REGISTRY_GENERATED_PATH = path.join(process.cwd(), "src/__registry__");

const project = new Project({
	compilerOptions: {},
});

async function createTempSourceFile(filename: string) {
	const dir = await fs.mkdtemp(path.join(tmpdir(), "alwurts-ai-"));
	return path.join(dir, filename);
}

// ----------------------------------------------------------------------------
// Build __registry__/index.tsx. and public/registry/index.json.
// ----------------------------------------------------------------------------
async function buildRegistry(registry: Registry) {
	let index = `// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

// biome-ignore lint/suspicious/noExplicitAny: <explanation>
export const Index: Record<string, any> = {
`;

	for (const item of registry) {
		const resolveFiles = item.files?.map(
			(file) => `${REGISTRY_BASE_PATH}/${file.path}`,
		);
		if (!resolveFiles) {
			continue;
		}

		const type = item.type.split(":")[1];

		// biome-ignore lint/style/useConst: <explanation>
		let sourceFilename = "";

		let componentPath = `@/registry/${type}/${item.name}`;

		if (item.files) {
			if (item.files.length) {
				componentPath = `@/registry/${item.files[0].path}`;
			}
		}

		index += `	"${item.name}": {
		name: "${item.name}",
		description: "${item.description ?? ""}",
		type: "${item.type}",
		registryDependencies: ${JSON.stringify(item.registryDependencies)},
		files: [${item.files?.map((file) => {
			const filePath = `${REGISTRY_BASE_PATH}/${file.path}`;
			//const resolvedFilePath = path.resolve(filePath);
			return `{
			path: "${filePath}",
			type: "${file.type}",
			target: "${file.target ?? ""}"
		}`;
		})}],
		categories: ${JSON.stringify(item.categories)},
		component: React.lazy(() => import("${componentPath}")),
		source: "${sourceFilename}",
		meta: ${JSON.stringify(item.meta)},
    },`;
	}

	index += `
}
`;

	const uiRegistryItems = registry.filter((item) =>
		["registry:ui"].includes(item.type),
	);

	const registryJson = JSON.stringify(uiRegistryItems, null, 2);
	rimraf.sync(path.join(REGISTRY_PUBLIC_PATH, "index.json"));
	await fs.writeFile(
		path.join(REGISTRY_PUBLIC_PATH, "index.json"),
		registryJson,
		"utf8",
	);

	rimraf.sync(path.join(REGISTRY_GENERATED_PATH, "index.tsx"));
	await fs.writeFile(
		path.join(REGISTRY_GENERATED_PATH, "index.tsx"),
		index,
		"utf8",
	);
}

// ----------------------------------------------------------------------------
// Build public/registry/[name].json.
// ----------------------------------------------------------------------------
async function buildStyles(registry: Registry) {
	const targetPath = REGISTRY_PUBLIC_PATH;
	// Create directory if it doesn't exist.
	if (!existsSync(targetPath)) {
		await fs.mkdir(targetPath, { recursive: true });
	}

	for (const item of registry) {
		if (!REGISTRY_INDEX_WHITELIST.includes(item.type)) {
			continue;
		}

		// biome-ignore lint/suspicious/noImplicitAnyLet: <explanation>
		let files;
		if (item.files) {
			files = await Promise.all(
				item.files.map(async (file) => {
					let content: string;
					try {
						content = await fs.readFile(
							path.join(process.cwd(), REGISTRY_BASE_PATH, file.path),
							"utf8",
						);
					} catch (_) {
						return;
					}

					const tempFile = await createTempSourceFile(file.path);
					const sourceFile = project.createSourceFile(tempFile, content, {
						scriptKind: ScriptKind.TSX,
					});

					sourceFile.getVariableDeclaration("iframeHeight")?.remove();
					sourceFile.getVariableDeclaration("containerClassName")?.remove();
					sourceFile.getVariableDeclaration("description")?.remove();

					const target = file.target || "";

					return {
						path: file.path,
						type: file.type,
						content: sourceFile.getText(),
						target,
					};
				}),
			);
		}

		const payload = registryItemSchema.safeParse({
			...item,
			files,
		});

		if (payload.success) {
			await fs.writeFile(
				path.join(targetPath, `${item.name}.json`),
				JSON.stringify(payload.data, null, 2),
				"utf8",
			);
		}
	}
}

const main = async () => {
	try {
		console.log("ðŸ’½ Building registry...");
		const result = registrySchema.safeParse(registry);

		if (!result.success) {
			console.error(result.error);
			process.exit(1);
		}

		await buildRegistry(result.data);
		await buildStyles(result.data);

		console.log("âœ… Done!");
	} catch (error) {
		console.error(error);
		process.exit(1);
	}
};

main();
